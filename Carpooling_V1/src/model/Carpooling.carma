component Car(int x, int y, int s, process Z){
	store {
		attrib location_x := x;
		attrib location_y := y;
		attrib takenSeats := s;
	}
	behaviour{
		//Privileged
		PRIVILEGED = moveFast[my.takenSeats >= 4 && from_x == my.location_x && from_y == my.location_y]
		                     (from_x, from_y, to_x, to_y){location_x := to_x, location_y := to_y}.PRIVILEGED + 
		             moveSlow[from_x == my.location_x && from_y == my.location_y]
		                     (from_x, from_y, to_x, to_y){location_x := to_x, location_y := to_y}.PRIVILEGED + 
		             releasePassenger[my.takenSeats >= 4 ]<>{takenSeats := my.takenSeats - 1}.NORMAL;
		//Normal
		NORMAL = moveSlow[from_x == my.location_x && from_y == my.location_y]
		                 (from_x, from_y, to_x, to_y){location_x := to_x, location_y := to_y}.NORMAL + 
		         takePassenger[my.takenSeats < 3]<>{takenSeats := my.takenSeats + 1}.NORMAL + 
		         takePassenger[my.takenSeats == 3]<>{takenSeats := my.takenSeats + 1}.PRIVILEGED;
	       	     
    }

    init{
        Z 
    }
}

component Person(int x, int y, int i, int q, process Z){
	store {
		attrib location_x := x;
		attrib location_y := y;
		attrib id := i;
		attrib queue := q;
	}
	behaviour{
		FREE = addPerson[qLocation_x == my.location_x && qLocation_x == my.location_x]
		                (qLocation_x, qLocation_y, q_id){queue := q_id}.QUEUED;
		  // + walk.FREE; //change location randomly ( ?)
		QUEUED = takePassenger().TRAVELLING;
		TRAVELLING = releasePassenger().FREE;
		
    }

    init{
        Z
    }
}

component QueuePoint(int x, int y, int i, int c, int s, process Z){
	store {
		attrib location_x := x;
		attrib location_y := y;
		attrib id := i;
		
		attrib capacity := c;
		attrib size := s;
		
	}
	behaviour{
		//Empty
		EMPTY = addPerson<my.location_x, my.location_y, my.id>{size := my.size +1}.FILLED;
		//Filled
		FILLED = addPerson[size < capacity - 1]<my.location_x, my.location_y, my.id>{size := my.size +1}.FILLED
				+ addPerson[size == capacity - 1]<my.location_x, my.location_y, my.id>{size := capacity}.FULL
				+ removePerson[size > 1]<>{size := my.size -1}.FILLED
				+ removePerson[size == 1]<>{size := 0}.EMPTY;
		//Full
		FULL = removePerson<>{size := my.size -1}.FILLED + 
		       removePerson[capacity == 1]<>{size := 0}.EMPTY;

    }

    init{
        Z
    }
    
}

component FastLane(int fx, int fy, int tx, int ty, process Z){
		store {
		attrib from_x := fx;
		attrib from_y := fy;
		attrib to_x := tx;
		attrib to_y := ty;
		
	   }
	   	behaviour{
			S = moveFast<my.from_x, my.from_y, my.to_x, my.to_y>.S;

    }

    init{
        Z 
    }
	
}

component SlowLane(int fx, int fy, int tx, int ty, process Z){
	store {
		attrib from_x := fx;
		attrib from_y := fy;
		attrib to_x := tx;
		attrib to_y := ty;
		
	   }
	   	behaviour{
		S = moveSlow<my.from_x, my.from_y, my.to_x, my.to_y>.S;

    }

    init{
        Z
    }
}

system Simple{

    collective{
    	
    	new Car(0, 0, 2, NORMAL);
    	new Car(0, 0, 4, PRIVILEGED);
    	
    	new Person(1, 1, 1, -1, FREE);
    	new Person(1, 8, 2, -1, FREE);
    	new Person(5, 5, 3, 1, QUEUED);

		new QueuePoint(5, 5, 1, 3, 1, FILLED);
		new QueuePoint(6, 6, 2, 3, 0, EMPTY);
		
		new FastLane(7, 7, 10, 10, S);
		new FastLane(2, 2, 15, 15, S);
		
		new SlowLane(0, 0, 2, 2, S);
    }

    environment{

        store{
        }

        prob{
			default : 1.0;
        }

        rate{
        	[true] moveSlow* 		: 1.0;
			[true] moveFast* 	: 0.03;
			default : 1.0;
        }

        update{
        }
    }
}
