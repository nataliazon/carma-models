component Car(int x, int y, int s, process Z){
	store {
		attrib location_x := x;
		attrib location_y := y;
		attrib takenSeats := s;
	}
	behaviour{
		//Privileged
		PRIVILEGED = oFiC_moveFast[my.takenSeats >= 4 && from_x == my.location_x && from_y == my.location_y]
		                     (from_x, from_y, to_x, to_y){my.location_x := to_x, my.location_y := to_y}.PRIVILEGED + 
		             oSiC_moveSlow[from_x == my.location_x && from_y == my.location_y]
		                     (from_x, from_y, to_x, to_y){my.location_x := to_x, my.location_y := to_y}.PRIVILEGED + 
		             oCiP_releasePassenger*[my.takenSeats >= 4 ]<>{my.takenSeats := my.takenSeats - 1}.NORMAL;
		//Normal
		NORMAL = oSiC_moveSlow[from_x == my.location_x && from_y == my.location_y]
		                 (from_x, from_y, to_x, to_y){my.location_x := to_x, my.location_y := to_y}.NORMAL + 		                 
		         oQiC_offerPerson[my.takenSeats < 3 && location_x == my.location_x && location_y == my.location_y](){my.takenSeats := my.takenSeats + 1}.NORMAL + 
		         oQiC_offerPerson[my.takenSeats == 3 && location_x == my.location_x && location_y == my.location_y](){my.takenSeats := my.takenSeats + 1}.PRIVILEGED; //+
		        // oCiP_releasePassenger[my.takenSeats >= 1 ]<>{takenSeats := my.takenSeats - 1}.NORMAL;		        	       	     
    }

    init{
        Z 
    }
}

component Person(int x, int y, int i, int q, process Z){
	store {
		attrib location_x := x;
		attrib location_y := y;
		attrib id := i;
		attrib queue := q;
	}
	behaviour{
		FREE = oQiP_addPerson[qLocation_x == my.location_x && qLocation_x == my.location_x]
		                (qLocation_x, qLocation_y, q_id){queue := q_id}.QUEUED;
		QUEUED = oQiP_removePerson[my.queue == qid](qid).TRAVELLING;
		TRAVELLING = continue*<>.TRAVELLING;
		//TRAVELLING = oCiP_releasePassenger().FREE;
		
    }

    init{
        Z
    }
}

component QueuePoint(int x, int y, int i, int c, int s, process Z){
	store {
		attrib location_x := x;
		attrib location_y := y;
		attrib id := i;
		
		attrib capacity := c;
		attrib size := s;
		
	}
	behaviour{
		//Empty
		EMPTY = oQiP_addPerson<my.location_x, my.location_y, my.id>{size := my.size +1}.FILLED;
		//Filled
		FILLED = oQiP_addPerson[my.size < my.capacity - 1]<my.location_x, my.location_y, my.id>{my.size := my.size +1}.FILLED
				+ oQiP_addPerson[my.size == my.capacity - 1]<my.location_x, my.location_y, my.id>{my.size := capacity}.FULL 
				+ oQiC_offerPerson[location_x == my.location_x && location_y == my.location_y]<>{}.USED;
		//Full
		FULL = oQiC_offerPerson[location_x == my.location_x && location_y == my.location_y]<>{}.USED;
		
		//A Car has approached
		USED = oQiP_removePerson[my.size > 1]<id>{my.size := my.size -1}.FILLED +
		       oQiP_removePerson[my.size == 1]<id>{my.size := 0}.EMPTY;

    }

    init{
        Z
    }
    
}

component FastLane(int fx, int fy, int tx, int ty, process Z){
		store {
		attrib usage := 0;
		attrib from_x := fx;
		attrib from_y := fy;
		attrib to_x := tx;
		attrib to_y := ty;
		
	   }
	   	behaviour{
			S = oFiC_moveFast<my.from_x, my.from_y, my.to_x, my.to_y>.M;
		    M = moved*<>{my.usage := my.usage + 1}.S;

    }

    init{
        Z 
    }
	
}

component SlowLane(int fx, int fy, int tx, int ty, process Z){
	store {
		attrib usage := 0;
		attrib from_x := fx;
		attrib from_y := fy;
		attrib to_x := tx;
		attrib to_y := ty;
		
	   }
	   	behaviour{
		S = oSiC_moveSlow<my.from_x, my.from_y, my.to_x, my.to_y>.M;
		M = moved*<>{my.usage := my.usage + 1}.S;

    }

    init{
        Z
    }
}

measure TravellingPerson = #{Person[TRAVELLING]| true };
measure FreePerson = #{Person[FREE]| true };
measure QueuedPerson = #{Person[QUEUED]| true };

measure PrivilegedCar = #{Car[PRIVILEGED]| true };
measure NormalCar = #{Car[NORMAL]| true };

measure CarOnlyDriver = #{Car[*]| my.takenSeats == 1 };
measure Car1Passenger = #{Car[*]| my.takenSeats == 2 };
measure Car2Passenger = #{Car[*]| my.takenSeats == 3 };
measure Car3Passenger = #{Car[*]| my.takenSeats == 4 };
measure Car4Passenger = #{Car[*]| my.takenSeats == 5 };

measure EmptyQueue = #{QueuePoint[EMPTY]| true };
measure FilledQueue = #{QueuePoint[FILLED]| true };
measure FullQueue = #{QueuePoint[FULL]| true };
measure UsedQueue = #{QueuePoint[USED]| true };



measure UsedSlowLane = #{SlowLane[M]| true };
measure FreeSlowLane = #{SlowLane[S]| true };
measure UsedFastLane = #{FastLane[M]| true };

measure UsageFastLaneMoreThan1 = #{FastLane[*]| my.usage >1 };
measure UsageSlowLaneMoreThan1 = #{SlowLane[*]| my.usage >1 };
measure UsageFastLaneMoreThan0 = #{FastLane[*]| my.usage >0 };
measure UsageSlowLaneMoreThan0 = #{SlowLane[*]| my.usage >0 };

system SmallCity{

    collective{
    	
    	new Car(0, 0, 1, NORMAL);
    	//new Car(0, 0, 1, NORMAL);
    	//new Car(0, 0, 1, NORMAL);
    	//new Car(0, 0, 1, NORMAL);
    	//new Car(0, 0, 1, NORMAL);
    	//new Car(0, 0, 1, NORMAL);
    	//new Car(0, 0, 1, NORMAL);
    	//new Car(0, 0, 1, NORMAL);
    	
    	new Person(1, 1, 1, -1, FREE);
    	new Person(1, 8, 2, -1, FREE);   	
    	new Person(1, 3, 3, 1, QUEUED);
    	new Person(1, 3, 4,  1, QUEUED);
    	new Person(1, 3, 5,  1, QUEUED);
    	new Person(1, 3, 6,  1, QUEUED);
    	new Person(1, 3, 7,  1, QUEUED);
    	new Person(1, 3, 8,  1, QUEUED);
    	new Person(1, 3, 9,  1, QUEUED);
    	new Person(1, 3, 10,  1, QUEUED);
    	new Person(1, 3, 11,  1, QUEUED);
    	new Person(1, 3, 12,  1, QUEUED);
    	new Person(1, 3, 13,  1, QUEUED);
    	new Person(1, 3, 14,  1, QUEUED);
    	new Person(1, 3, 15,  1, QUEUED);
    	new Person(6, 6, 16, -1, FREE);

		new QueuePoint(1, 3, 1, 20, 13, FILLED);
		new QueuePoint(4, 5, 2, 10, 0, EMPTY);
		
		new FastLane(1, 3, 2, 4, S);
		new FastLane(2, 4, 4, 5, S);
		new FastLane(4, 5, 5, 4, S);
		new FastLane(5, 4, 5, 0, S);
		new FastLane(5, 0, 4, -1, S);
		new FastLane(4, -1, 1, -1, S);
		new FastLane(1, -1, 2, 2, S);
		new FastLane(2, 2, 1, 3, S);
		
		new SlowLane(0, 0, 1, 1, S);
		new SlowLane(1, 1, 1, 3, S);
		new SlowLane(1, 3, 2, 6, S); 
		new SlowLane(2, 6, 4, 5, S);
		new SlowLane(4, 5, 4, 4, S);
		new SlowLane(4, 4, 3, 2, S);
		new SlowLane(3, 2, 2, 0, S);
		new SlowLane(2, 0, 0, 0, S);
    }

    environment{

        store{
        }

        prob{
			default : 1.0;
        }

        rate{
        	[true] oSiC_moveSlow* 		: 1.0;
			[true] oFiC_moveFast* 	: 0.03;
			default : 1.0;
        }

        update{
        }
    }
}
